// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:flutter_bili/http/entity/recommend_entity.dart';
import 'package:flutter_bili/http/entity/video_details_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<RecommendEntity>[] is M) {
      return data.map<RecommendEntity>((Map<String, dynamic> e) =>
          RecommendEntity.fromJson(e)).toList() as M;
    }
    if (<RecommendItem>[] is M) {
      return data.map<RecommendItem>((Map<String, dynamic> e) =>
          RecommendItem.fromJson(e)).toList() as M;
    }
    if (<RecommendItemOwner>[] is M) {
      return data.map<RecommendItemOwner>((Map<String, dynamic> e) =>
          RecommendItemOwner.fromJson(e)).toList() as M;
    }
    if (<RecommendItemStat>[] is M) {
      return data.map<RecommendItemStat>((Map<String, dynamic> e) =>
          RecommendItemStat.fromJson(e)).toList() as M;
    }
    if (<RecommendItemRcmdReason>[] is M) {
      return data.map<RecommendItemRcmdReason>((Map<String, dynamic> e) =>
          RecommendItemRcmdReason.fromJson(e)).toList() as M;
    }
    if (<RecommendAbtest>[] is M) {
      return data.map<RecommendAbtest>((Map<String, dynamic> e) =>
          RecommendAbtest.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsEntity>[] is M) {
      return data.map<VideoDetailsEntity>((Map<String, dynamic> e) =>
          VideoDetailsEntity.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsDescV2>[] is M) {
      return data.map<VideoDetailsDescV2>((Map<String, dynamic> e) =>
          VideoDetailsDescV2.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsRights>[] is M) {
      return data.map<VideoDetailsRights>((Map<String, dynamic> e) =>
          VideoDetailsRights.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsOwner>[] is M) {
      return data.map<VideoDetailsOwner>((Map<String, dynamic> e) =>
          VideoDetailsOwner.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsStat>[] is M) {
      return data.map<VideoDetailsStat>((Map<String, dynamic> e) =>
          VideoDetailsStat.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsDimension>[] is M) {
      return data.map<VideoDetailsDimension>((Map<String, dynamic> e) =>
          VideoDetailsDimension.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsPages>[] is M) {
      return data.map<VideoDetailsPages>((Map<String, dynamic> e) =>
          VideoDetailsPages.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsPagesDimension>[] is M) {
      return data.map<VideoDetailsPagesDimension>((Map<String, dynamic> e) =>
          VideoDetailsPagesDimension.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsSubtitle>[] is M) {
      return data.map<VideoDetailsSubtitle>((Map<String, dynamic> e) =>
          VideoDetailsSubtitle.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsSubtitleList>[] is M) {
      return data.map<VideoDetailsSubtitleList>((Map<String, dynamic> e) =>
          VideoDetailsSubtitleList.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsSubtitleListAuthor>[] is M) {
      return data.map<VideoDetailsSubtitleListAuthor>((
          Map<String, dynamic> e) => VideoDetailsSubtitleListAuthor.fromJson(e))
          .toList() as M;
    }
    if (<VideoDetailsStaff>[] is M) {
      return data.map<VideoDetailsStaff>((Map<String, dynamic> e) =>
          VideoDetailsStaff.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsStaffVip>[] is M) {
      return data.map<VideoDetailsStaffVip>((Map<String, dynamic> e) =>
          VideoDetailsStaffVip.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsStaffVipLabel>[] is M) {
      return data.map<VideoDetailsStaffVipLabel>((Map<String, dynamic> e) =>
          VideoDetailsStaffVipLabel.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsStaffOfficial>[] is M) {
      return data.map<VideoDetailsStaffOfficial>((Map<String, dynamic> e) =>
          VideoDetailsStaffOfficial.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsUserGarb>[] is M) {
      return data.map<VideoDetailsUserGarb>((Map<String, dynamic> e) =>
          VideoDetailsUserGarb.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsHonorReply>[] is M) {
      return data.map<VideoDetailsHonorReply>((Map<String, dynamic> e) =>
          VideoDetailsHonorReply.fromJson(e)).toList() as M;
    }
    if (<VideoDetailsHonorReplyHonor>[] is M) {
      return data.map<VideoDetailsHonorReplyHonor>((Map<String, dynamic> e) =>
          VideoDetailsHonorReplyHonor.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (RecommendEntity).toString(): RecommendEntity.fromJson,
    (RecommendItem).toString(): RecommendItem.fromJson,
    (RecommendItemOwner).toString(): RecommendItemOwner.fromJson,
    (RecommendItemStat).toString(): RecommendItemStat.fromJson,
    (RecommendItemRcmdReason).toString(): RecommendItemRcmdReason.fromJson,
    (RecommendAbtest).toString(): RecommendAbtest.fromJson,
    (VideoDetailsEntity).toString(): VideoDetailsEntity.fromJson,
    (VideoDetailsDescV2).toString(): VideoDetailsDescV2.fromJson,
    (VideoDetailsRights).toString(): VideoDetailsRights.fromJson,
    (VideoDetailsOwner).toString(): VideoDetailsOwner.fromJson,
    (VideoDetailsStat).toString(): VideoDetailsStat.fromJson,
    (VideoDetailsDimension).toString(): VideoDetailsDimension.fromJson,
    (VideoDetailsPages).toString(): VideoDetailsPages.fromJson,
    (VideoDetailsPagesDimension).toString(): VideoDetailsPagesDimension
        .fromJson,
    (VideoDetailsSubtitle).toString(): VideoDetailsSubtitle.fromJson,
    (VideoDetailsSubtitleList).toString(): VideoDetailsSubtitleList.fromJson,
    (VideoDetailsSubtitleListAuthor).toString(): VideoDetailsSubtitleListAuthor
        .fromJson,
    (VideoDetailsStaff).toString(): VideoDetailsStaff.fromJson,
    (VideoDetailsStaffVip).toString(): VideoDetailsStaffVip.fromJson,
    (VideoDetailsStaffVipLabel).toString(): VideoDetailsStaffVipLabel.fromJson,
    (VideoDetailsStaffOfficial).toString(): VideoDetailsStaffOfficial.fromJson,
    (VideoDetailsUserGarb).toString(): VideoDetailsUserGarb.fromJson,
    (VideoDetailsHonorReply).toString(): VideoDetailsHonorReply.fromJson,
    (VideoDetailsHonorReplyHonor).toString(): VideoDetailsHonorReplyHonor
        .fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}